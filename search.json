[
  {
    "objectID": "palmsens.html",
    "href": "palmsens.html",
    "title": "Palmsens Data Parsing",
    "section": "",
    "text": "Let’s load a typical palmsens file\n\nimport os\n\n\ntest_dpvs_root = \"../test_files/DPVs_palmsens\"\nos.listdir(test_dpvs_root)\n\n['multi_column.csv', 'single_column.csv']\n\n\n\nwith open(os.path.join(test_dpvs_root, \"multi_column.csv\"), encoding=\"utf-16\") as f: # note the utf-16 encoding\n    lines = f.read().splitlines()\n\nlines[:10]\n\n['Date and time:,2025-03-29 23:18:59',\n 'Notes:',\n ',,,,,,,,,,,,',\n 'Differential Pulse Voltammetry [1]: S49,,Differential Pulse Voltammetry [8]: S48,,Differential Pulse Voltammetry [15]: S47,,Differential Pulse Voltammetry [22]: S46,,Differential Pulse Voltammetry [29]: S45,,Differential Pulse Voltammetry [36]: S44,,Differential Pulse Voltammetry [43]: S43',\n 'Date and time measurement:,2025-03-29 13:32:13,Date and time measurement:,2025-03-29 14:28:03,Date and time measurement:,2025-03-29 16:28:02,Date and time measurement:,2025-03-29 17:28:20,Date and time measurement:,2025-03-29 19:41:19,Date and time measurement:,2025-03-29 20:35:10,Date and time measurement:,2025-03-29 21:22:52,',\n 'V,µA,V,µA,V,µA,V,µA,V,µA,V,µA,V,µA',\n '0,0.019751112,0,0.040179824,0,0.045964596,0,0.04073982,0,0.044447004,0,0.043287808,0,0.05077498',\n '0.01020757,0.019157514,0.01020757,0.039586228,0.01020757,0.0450126,0.01020757,0.039709428,0.01020757,0.042632616,0.01020757,0.041630216,0.01020757,0.050198176',\n '0.02041514,0.018810318,0.02041514,0.038824632,0.02041514,0.044525404,0.02041514,0.039082228,0.02041514,0.04155182,0.02041514,0.040493424,0.02041514,0.047666992',\n '0.03062271,0.01848552,0.03062271,0.038460632,0.03062271,0.044407804,0.03062271,0.038936632,0.03062271,0.04089662,0.03062271,0.039731828,0.03062271,0.045947796']\n\n\npalmsens files have a defined line by line format, so we can parse them according to line index. first is the date and time (of export?). This isn’t actually useful, the useful information is when the measurements were taken, which is later\nWe don’t really use notes, so I’m also skipping lines 1 and 2. Next is the names line:\n\nlines[3]\n\n'Differential Pulse Voltammetry [1]: S49,,Differential Pulse Voltammetry [8]: S48,,Differential Pulse Voltammetry [15]: S47,,Differential Pulse Voltammetry [22]: S46,,Differential Pulse Voltammetry [29]: S45,,Differential Pulse Voltammetry [36]: S44,,Differential Pulse Voltammetry [43]: S43'\n\n\nNow we need to parse datetimes for when the DPVs were taken\n\nsource\n\nparse_datetime\n\n parse_datetime (ps_datetime:str)\n\n\nassert parse_datetime(\"2025-03-29 23:18:59\") == datetime(2025, 3, 29, 23, 18, 59)\ntest_fail(lambda: parse_datetime(\"not a ps line\"), exc=ValueError)\n\n\nlines[4].split(\"Date and time measurement:,\")[1:]\n\n['2025-03-29 13:32:13,',\n '2025-03-29 14:28:03,',\n '2025-03-29 16:28:02,',\n '2025-03-29 17:28:20,',\n '2025-03-29 19:41:19,',\n '2025-03-29 20:35:10,',\n '2025-03-29 21:22:52,']\n\n\n\nsource\n\n\nparse_measurement_datetimes\n\n parse_measurement_datetimes (ps_fourth_line:str)\n\n\ntest(parse_measurement_datetimes(lines[4]), [datetime(2025, 3, 29, 13, 32, 13),\n datetime(2025, 3, 29, 14, 28, 3),\n datetime(2025, 3, 29, 16, 28, 2),\n datetime(2025, 3, 29, 17, 28, 20),\n datetime(2025, 3, 29, 19, 41, 19),\n datetime(2025, 3, 29, 20, 35, 10),\n datetime(2025, 3, 29, 21, 22, 52)], all_equal)\n\nNext is the data, which is pairs of V, uA data\n\nlines[5].split(\",\")\n\n['V', 'µA', 'V', 'µA', 'V', 'µA', 'V', 'µA', 'V', 'µA', 'V', 'µA', 'V', 'µA']\n\n\n\nsource\n\n\nvalidate_cols\n\n validate_cols (ps_fifth_line:str)\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nps_fifth_line\nstr\n\n\n\nReturns\nbool\nTrue if the file has the expected columns\n\n\n\n\nassert validate_cols(lines[5])\nassert not validate_cols(\"not a valid col\")\n\n\nps_data_lines = lines[6:-1] # the last line is always an end character\nps_data_lines[:5] # cols of V1, uA1, V2, uA2, V3, uA3, ...\n\n['0,0.019751112,0,0.040179824,0,0.045964596,0,0.04073982,0,0.044447004,0,0.043287808,0,0.05077498',\n '0.01020757,0.019157514,0.01020757,0.039586228,0.01020757,0.0450126,0.01020757,0.039709428,0.01020757,0.042632616,0.01020757,0.041630216,0.01020757,0.050198176',\n '0.02041514,0.018810318,0.02041514,0.038824632,0.02041514,0.044525404,0.02041514,0.039082228,0.02041514,0.04155182,0.02041514,0.040493424,0.02041514,0.047666992',\n '0.03062271,0.01848552,0.03062271,0.038460632,0.03062271,0.044407804,0.03062271,0.038936632,0.03062271,0.04089662,0.03062271,0.039731828,0.03062271,0.045947796',\n '0.04083028,0.01798712,0.04083028,0.038225432,0.04083028,0.043971008,0.04083028,0.038634232,0.04083028,0.039759828,0.04083028,0.038651032,0.04083028,0.045707']\n\n\n\nstep1 = np.array([line.split(\",\") for line in ps_data_lines], dtype=float).T # first, lets transpose it. so now it's rows of V1, uA1, V2, uA2, V3, uA3, ...\nstep1[:, :5]\n\narray([[0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028],\n       [0.01975111, 0.01915751, 0.01881032, 0.01848552, 0.01798712],\n       [0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028],\n       [0.04017982, 0.03958623, 0.03882463, 0.03846063, 0.03822543],\n       [0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028],\n       [0.0459646 , 0.0450126 , 0.0445254 , 0.0444078 , 0.04397101],\n       [0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028],\n       [0.04073982, 0.03970943, 0.03908223, 0.03893663, 0.03863423],\n       [0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028],\n       [0.044447  , 0.04263262, 0.04155182, 0.04089662, 0.03975983],\n       [0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028],\n       [0.04328781, 0.04163022, 0.04049342, 0.03973183, 0.03865103],\n       [0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028],\n       [0.05077498, 0.05019818, 0.04766699, 0.0459478 , 0.045707  ]])\n\n\n\nstep2 = step1.reshape(step1.shape[0]//2, 2, -1)\nstep2[:,:, :5]\n\narray([[[0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028],\n        [0.01975111, 0.01915751, 0.01881032, 0.01848552, 0.01798712]],\n\n       [[0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028],\n        [0.04017982, 0.03958623, 0.03882463, 0.03846063, 0.03822543]],\n\n       [[0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028],\n        [0.0459646 , 0.0450126 , 0.0445254 , 0.0444078 , 0.04397101]],\n\n       [[0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028],\n        [0.04073982, 0.03970943, 0.03908223, 0.03893663, 0.03863423]],\n\n       [[0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028],\n        [0.044447  , 0.04263262, 0.04155182, 0.04089662, 0.03975983]],\n\n       [[0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028],\n        [0.04328781, 0.04163022, 0.04049342, 0.03973183, 0.03865103]],\n\n       [[0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028],\n        [0.05077498, 0.05019818, 0.04766699, 0.0459478 , 0.045707  ]]])\n\n\n\n# and now, if i want to retrieve a specific column's data\ncol_data = step2[2, :, :5]\n{\n    \"potential\": col_data[0],\n    \"current\": col_data[1]*1e-6 # to convert it from uA to A\n}\n\n{'potential': array([0.        , 0.01020757, 0.02041514, 0.03062271, 0.04083028]),\n 'current': array([4.5964596e-08, 4.5012600e-08, 4.4525404e-08, 4.4407804e-08,\n        4.3971008e-08])}\n\n\n\nsource\n\n\nretrieve_data\n\n retrieve_data (col_index:int, organized_data:numpy.ndarray)\n\n\n\n\n\nType\nDetails\n\n\n\n\ncol_index\nint\nindex of the column\n\n\norganized_data\nndarray\noutput of organize_column_data\n\n\nReturns\ndict\na dict with potential (in volts) and current (in A)\n\n\n\n\nsource\n\n\norganize_column_data\n\n organize_column_data (ps_data_lines:list[str])\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nps_data_lines\nlist\nusually lines[6:-1] of a palmsens .csv file\n\n\nReturns\nndarray\nnumpy array with shape (N, 2, L) where N is the number of columns, the second axis is [potential, current], and L is length of measurement\n\n\n\nPutting it all together,\n\nsource\n\n\nparse_palmsens_file\n\n parse_palmsens_file (contents:str)\n\n*Takes the contents of a Palmsens .csv file (usually encoded in utf-16) and returns a list of measurements. For instance,\n[\n    {\n        'name': 'Differential Pulse Voltammetry [1]: S49',\n        'timestamp': '2025-03-29T13:32:13',\n        'potential': array([0.        , 0.01020757, 0.02041514, 0.03062271, ...]),\n        'current': array([1.97511120e-08, 1.91575140e-08, 1.88103180e-08, ...])\n    },\n    {\n        'name': 'Differential Pulse Voltammetry [8]: S48',\n        'timestamp': '2025-03-29T14:28:03',\n        'potential': array([0.        , 0.01020757, 0.02041514, ... ]),\n        'current': array([4.0179824e-08, 3.9586228e-08, 3.8824632e-08, ...])\n    }\n]```*\n\n\nNow for a few tests:\n\n::: {#8a75f9c5-7855-4211-9b37-dcdb7b613ae6 .cell}\n``` {.python .cell-code}\nwith open(os.path.join(test_dpvs_root, \"multi_column.csv\"), encoding=\"utf-16\") as f:\n    contents = f.read()\n\noutput = parse_palmsens_file(contents)\nassert output[0][\"name\"] == \"Differential Pulse Voltammetry [1]: S49\"\nassert output[0][\"timestamp\"] == \"2025-03-29T13:32:13\"\nassert len(output) == 7\nassert output[3][\"current\"][-1] == 7.4046544e-08\n:::\n\nwith open(os.path.join(test_dpvs_root, \"single_column.csv\"), encoding=\"utf-16\") as f:\n    contents = f.read()\n\noutput = parse_palmsens_file(contents)\nassert len(output) == 1\nassert output[0][\"name\"] == \"Differential Pulse Voltammetry [1]: 31.25uM - DPV i vs E [1]\"\nassert output[0][\"timestamp\"] == \"2025-02-11T16:04:12\"\nassert output[0][\"potential\"][2] == 0.02041514\nassert output[0][\"current\"][0] == 3.4395052e-08\nassert output[0][\"current\"][-1] == 7.5359048e-08",
    "crumbs": [
      "Palmsens Data Parsing"
    ]
  },
  {
    "objectID": "chi.html",
    "href": "chi.html",
    "title": "CHI File Parsing",
    "section": "",
    "text": "CHI text file formats have a few features we want to handle: 1. Included sections. CHI allows the presence or absence of each of these four: memo, parameters, results, numeric data 2. Separator: comma, tab (and also space and linefeed, although these are less common and aren’t planned features) 3. Different column formats (multichannel results in different columns, multichannel files are currently not supported) 4. Empty time column: some files have an empty time column for some reason\nLet’s look an example of a file, to get started\n\nimport os\n\n\ntest_root = \"../test_files\"\n\ntest_dpv_dir = os.path.join(test_root, \"DPVs\")\ntest_cv_dir = os.path.join(test_root, \"CVs\")\nos.listdir(test_dpv_dir), os.listdir(test_cv_dir)\n\n(['MPRN_comma.txt',\n  'PN_tab_time.txt',\n  'MPRN_tab.txt',\n  'ps_single.csv',\n  'MPN_tab.txt',\n  'MPRN_tab_time.txt',\n  'ps_multi.csv'],\n ['MPRN_charge.txt'])\n\n\n\nwith open(os.path.join(test_dpv_dir, \"MPRN_comma.txt\")) as f:\n    lines = f.read().splitlines()\n\nlines[:30]\n\n['Feb. 6, 2025   17:35:06',\n 'Differential Pulse Voltammetry',\n 'File: iaa_7.8125um_mnge_gce_2_250206.bin',\n 'Data Source:  Experiment',\n 'Instrument Model:  CHI1040C',\n 'Header: ',\n 'Note: ',\n '',\n 'Init E (V) = 0.2',\n 'Final E (V) = 1',\n 'Incr E (V) = 0.002',\n 'Amplitude (V) = 0.025',\n 'Pulse Width (sec) = 0.05',\n 'Sample Width (sec) = 0.0167',\n 'Pulse Period (sec) = 0.5',\n 'Quiet Time (sec) = 2',\n 'Sensitivity (A/V) = 1e-6',\n '',\n 'Results:',\n '',\n 'Channel 1:',\n 'Ep = 0.698V',\n 'ip = -1.338e-6A',\n 'Ap = -2.077e-7VA',\n '',\n 'Potential/V, Current/A',\n '',\n '0.202, -6.596e-7',\n '0.204, -6.557e-7',\n '0.206, -6.549e-7']\n\n\nNow we can break down the sections:\n\nmemo = lines[:7]\nmemo\n\n['Feb. 6, 2025   17:35:06',\n 'Differential Pulse Voltammetry',\n 'File: iaa_7.8125um_mnge_gce_2_250206.bin',\n 'Data Source:  Experiment',\n 'Instrument Model:  CHI1040C',\n 'Header: ',\n 'Note: ']\n\n\n\nparams = lines[8:17] # parameters\nparams\n\n['Init E (V) = 0.2',\n 'Final E (V) = 1',\n 'Incr E (V) = 0.002',\n 'Amplitude (V) = 0.025',\n 'Pulse Width (sec) = 0.05',\n 'Sample Width (sec) = 0.0167',\n 'Pulse Period (sec) = 0.5',\n 'Quiet Time (sec) = 2',\n 'Sensitivity (A/V) = 1e-6']\n\n\n\nresults = lines[18:24] # results\nresults\n\n['Results:',\n '',\n 'Channel 1:',\n 'Ep = 0.698V',\n 'ip = -1.338e-6A',\n 'Ap = -2.077e-7VA']\n\n\n\nnumeric_data = lines[25:]\nnumeric_data[:5]\n\n['Potential/V, Current/A',\n '',\n '0.202, -6.596e-7',\n '0.204, -6.557e-7',\n '0.206, -6.549e-7']\n\n\nFirst, let’s turn the date string within a memo into a proper datetime object\n\nsource\n\nparse_datetime\n\n parse_datetime (chi_timestamp:str)\n\nTurn a CHI timestamp into a python datetime object. If parsing fails, this function returns None.\n\nassert parse_datetime(\"Feb. 6, 2025   17:35:06\") == datetime(2025, 2, 6, 17, 35, 6)\nassert parse_datetime(\"invalid\") == None\nassert parse_datetime(\"Oct. 10, 2022   09:30:07\") == datetime(2022, 10, 10, 9, 30, 7)\nassert parse_datetime(\"Oct. 10, 2022   12:12:21\") == datetime(2022, 10, 10, 12, 12, 21)\nassert parse_datetime(\"July 19, 2022   10:35:26\") == datetime(2022, 7, 19, 10, 35, 26)\nassert parse_datetime(\"Sept. 29, 2022   16:23:14\") == datetime(2022, 9, 29, 16, 23, 14)\n\nNow notice that most metadata in this document is either colon separated for a string (e.g. File: iaa_7.8125um_mnge_gce_2_250206.bin, Instrument Model:  CHI1040C) or equals separated for a float (Init E (V) = 0.2, Quiet Time (sec) = 2) so let’s create some parsers for those.\n\nsource\n\n\nparse_line\n\n parse_line (line, sep)\n\n\nassert parse_colon(\"File: iaa_7.8125um_mnge_gce_2_250206.bin\") == (\"File\", \"iaa_7.8125um_mnge_gce_2_250206.bin\")\nassert parse_colon(\"Instrument Model:  CHI1040C\") == ('Instrument Model', 'CHI1040C')\nassert parse_colon(\"Header: \") == ('Header', '')\nassert parse_colon(\"Note: This one contains a colon: for testing\") == ('Note', 'This one contains a colon: for testing')\ntest_fail(lambda: parse_colon(\"no colon in this one\"), exc=ValueError)\n\n\nsource\n\n\nparse_equals\n\n parse_equals (line)\n\nParse an equals line, e.g. Init E (V) = 0.5 Automatically casts the value after the \"=\" to a float if possible.\n\nassert parse_equals(\"Init E (V) = 0.5\") == ('Init E (V)', 0.5)\nassert parse_equals(\"Final E (V) = 1\") == ('Final E (V)', 1.0)\nassert parse_equals(\"Sample Width (sec) = 0.0167\") == ('Sample Width (sec)', 0.0167)\nassert parse_equals(\"Sensitivity (A/V) = 1e-6\") == ('Sensitivity (A/V)', 1e-06)\ntest_fail(lambda: parse_equals(\"no equals in this one\"), exc=ValueError)\n\nnow we have everything we need to parse the memo\n\nmemo\n\n['Feb. 6, 2025   17:35:06',\n 'Differential Pulse Voltammetry',\n 'File: iaa_7.8125um_mnge_gce_2_250206.bin',\n 'Data Source:  Experiment',\n 'Instrument Model:  CHI1040C',\n 'Header: ',\n 'Note: ']\n\n\n\nsource\n\n\nparse_memo\n\n parse_memo (memo_lines:list[str])\n\n*Parses lines containing a memo into a dictionary, e.g.\n['Feb. 6, 2025   17:35:06',\n 'Differential Pulse Voltammetry',\n 'File: iaa_7.8125um_mnge_gce_2_250206.bin',\n 'Data Source:  Experiment',\n 'Instrument Model:  CHI1040C',\n 'Header: ',\n 'Note: ']\ninto\n{'timestamp': '2025-02-06T17:35:06',\n'technique': 'Differential Pulse Voltammetry',\n'file': 'iaa_7.8125um_mnge_gce_2_250206.bin',\n'instrument_model': 'CHI1040C'}```*\n\n\n::: {#cell-23 .cell}\n``` {.python .cell-code}\nassert parse_memo(memo) == {'timestamp': '2025-02-06T17:35:06',\n 'technique': 'Differential Pulse Voltammetry',\n 'file': 'iaa_7.8125um_mnge_gce_2_250206.bin',\n 'instrument_model': 'CHI1040C'}\n\nassert parse_memo(\"\"\"Oct. 10, 2022   12:12:21\nDifferential Pulse Voltammetry\nFile: pg62.5um_dapg0um_m9_gce_dpv_221010.bin\nData Source:  Experiment\nInstrument Model:  CHI1040C\nHeader: \nNote: \"\"\".splitlines()) == {'timestamp': '2022-10-10T12:12:21',\n 'technique': 'Differential Pulse Voltammetry',\n 'file': 'pg62.5um_dapg0um_m9_gce_dpv_221010.bin',\n 'instrument_model': 'CHI1040C'}\n\ntest_fail(lambda: parse_memo(\"Not a memo\"), exc=ValueError)\ntest_fail(lambda: parse_memo([\"Feb. 6, 2025   17:35:06\"] + [\"\"]*6))\n:::\nParsing the results section is currently not a supported feature. Usually, this information isn’t important in my analysis.\nNow we can parse parameters. Each line should contain an equals sign, and we can just extract the value with parse_equals\n\nsource\n\n\nparse_parameters\n\n parse_parameters (lines:list[str])\n\n\nlines = \"\"\"Init E (V) = -0.9\nHigh E (V) = 0.9\nLow E (V) = -0.9\nInit P/N = P\nScan Rate (V/s) = 0.025\nSegment = 8\nSample Interval (V) = 0.001\nQuiet Time (sec) = 2\nSensitivity (A/V) = 1e-5\"\"\".splitlines()\n\nassert parse_parameters(lines) == {'Init E (V)': -0.9,\n 'High E (V)': 0.9,\n 'Low E (V)': -0.9,\n 'Init P/N': 'P',\n 'Scan Rate (V/s)': 0.025,\n 'Segment': 8.0,\n 'Sample Interval (V)': 0.001,\n 'Quiet Time (sec)': 2.0,\n 'Sensitivity (A/V)': 1e-05}\n\nNow we need to extract column names from the numeric data. There’s a catch here, in that the separator could be one of a few options. These are both valid:\nPotential/V Current/A\n\n0.204   -5.151e-7\n0.208   -5.008e-7\n0.212   -4.915e-7\nPotential/V, Current/A\n\n0.202, -6.596e-7\n0.204, -6.557e-7\n0.206, -6.549e-7\nSo let’s first detect the parser for this section. The assumption is that Potential/V is always the first column. So we can just look at the next character directly afterward.\n\nsource\n\n\ndetect_column_sep\n\n detect_column_sep (line:str)\n\n*Detects the separator for the line containing columns within a CHI numeric data section.\ne.g. Potential/V, Current/A returns \",\"\ne.g. Potential/V   Current/A returns \"   \"*\n\n\n\n\nType\nDetails\n\n\n\n\nline\nstr\nline containing columns\n\n\nReturns\nstr\nseperator, usually either “,” or “\n\n\n\n\ntab_sep_example = \"\"\"Potential/V    Current/A\n\n0.204   -5.151e-7\n0.208   -5.008e-7\n0.212   -4.915e-7\"\"\".splitlines()\n\ncomma_sep_example = \"\"\"Potential/V, Current/A\n\n0.202, -6.596e-7\n0.204, -6.557e-7\n0.206, -6.549e-7\"\"\".splitlines()\n\nassert detect_column_sep(tab_sep_example[0]) == \"\\t\"\nassert detect_column_sep(comma_sep_example[0]) == \", \"\ntest_fail(lambda: detect_column_sep(\"this is not a column line\"), exc=ValueError)\n\nNow we can parse the whole numeric data section\n\nsource\n\n\nparse_numeric_data\n\n parse_numeric_data (lines:list[str])\n\nParses numerical data within a CHI data file.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nlines\nlist\ndata lines, starting with the column header\n\n\nReturns\ndict\na dictionary of column -&gt; numpy float array\n\n\n\n\n# tab sep example\ntest(parse_numeric_data(\"\"\"Potential/V  Current/A\n\n0.204   -5.151e-7\n0.208   -5.008e-7\n0.212   -4.915e-7\"\"\".splitlines()), {'Potential/V': np.array([0.204, 0.208, 0.212]),\n 'Current/A': np.array([-5.151e-07, -5.008e-07, -4.915e-07])}, all_equal)\n\n# comma sep example\ntest(parse_numeric_data(\"\"\"Potential/V, Current/A\n\n0.202, -6.596e-7\n0.204, -6.557e-7\n0.206, -6.549e-7\"\"\".splitlines()), {'Potential/V': np.array([0.202, 0.204, 0.206]),\n 'Current/A': np.array([-6.596e-07, -6.557e-07, -6.549e-07])}, all_equal)\n\n# tab sep with faulty time column\ntest(parse_numeric_data(\"\"\"Potential/V  Current/A   Time/s\n\n0.504   -4.187e-7\n0.508   -3.890e-7\n0.512   -3.711e-7\n0.516   -3.597e-7\"\"\".splitlines()), {'Potential/V': np.array([0.504, 0.508, 0.512, 0.516]),\n 'Current/A': np.array([-4.187e-07, -3.890e-07, -3.711e-07, -3.597e-07])}, all_equal)\n\n# number of columns mismatched\ntest_fail(lambda: parse_numeric_data(\"\"\"Potential/V Current/A   Imaginary/W\n\n0.504   -4.187e-7\n0.508   -3.890e-7\n0.512   -3.711e-7\n0.516   -3.597e-7\"\"\".splitlines()), exc=ValueError)\n\nNow that we can parse all the sections, we just need to auto-detect them within files. Sections are always in order. So we can detect if the memo is present by seeing if line 2 starts with \"File:\" and line three starts with \"Data Source\":.\n\nsource\n\n\ncontains_memo\n\n contains_memo (lines:list[str])\n\n\nassert contains_memo(\"\"\"Oct. 4, 2024   11:25:46\nCyclic Voltammetry\nFile: 241004_3.125um_curcumin_incitratenah2po4buffer_ph3_50um_methylv\nData Source:  Experiment\nInstrument Model:  CHI1040C\nHeader: \nNote: \"\"\".splitlines()) == True\n\nassert contains_memo(\"\"\"Init E (V) = 0.5\nFinal E (V) = 1\nIncr E (V) = 0.002\nAmplitude (V) = 0.025\nPulse Width (sec) = 0.05\nSample Width (sec) = 0.0167\nPulse Period (sec) = 0.5\nQuiet Time (sec) = 2\nSensitivity (A/V) = 1e-6\"\"\".splitlines()) == False\n\nwe can tell if the next section contains parameters by checking if it starts with \"Init E (V) = \", which is the first parameter for both DPV and CV\n\nsource\n\n\ncontains_parameters\n\n contains_parameters (lines)\n\n\nassert contains_parameters(\"\"\"Init E (V) = -0.9\nHigh E (V) = 0.9\nLow E (V) = -0.9\nInit P/N = P\"\"\".splitlines())\n\nassert not contains_parameters(\"\"\"\nInit E (V) = -0.9\nHigh E (V) = 0.9\nLow E (V) = -0.9\nInit P/N = P\n\"\"\".splitlines())\n\nassert not contains_parameters(\"\"\"Potential/V, Current/A, Charge/C, Time/s\n\n-0.900, 1.305e-5, 5.218e-7, 4.000e-2\n-0.899, 1.291e-5, 1.038e-6, 8.000e-2\n-0.898, 1.277e-5, 1.549e-6, 1.200e-1\"\"\".splitlines())\n\nand we can find the end of the parameters lines by looking for the \"Sensitivity (A/V) = \" line.\n\nsource\n\n\nfind_parameters_end\n\n find_parameters_end (lines:list[str])\n\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nlines\nlist\n\n\n\nReturns\nint\nreturns the index of line after the last parameter line\n\n\n\n\nassert find_parameters_end(\"\"\"Init E (V) = -0.9\nHigh E (V) = 0.9\nLow E (V) = -0.9\nInit P/N = P\nScan Rate (V/s) = 0.025\nSegment = 8\nSample Interval (V) = 0.001\nQuiet Time (sec) = 2\nSensitivity (A/V) = 1e-5\"\"\".splitlines()) == 9\n\n# remove sensitivity so it fails\ntest_fail(lambda: find_parameters_end(\"\"\"Init E (V) = -0.9\nHigh E (V) = 0.9\nLow E (V) = -0.9\nInit P/N = P\nScan Rate (V/s) = 0.025\nSegment = 8\nSample Interval (V) = 0.001\nQuiet Time (sec) = 2\n\nSegment 1:\n\"\"\".splitlines()))\n\n\nsource\n\n\nfind_start_of_numeric_data\n\n find_start_of_numeric_data (lines:list[str])\n\nFinds the index of the columns line by looking for Potential/V.\n\nassert find_start_of_numeric_data(['Results:',\n '',\n 'Channel 1:',\n 'Ep = 0.698V',\n 'ip = -1.338e-6A',\n 'Ap = -2.077e-7VA',\n '',\n 'Potential/V, Current/A',\n '',\n '0.202, -6.596e-7',\n '0.204, -6.557e-7',\n '0.206, -6.549e-7',\n '0.208, -6.547e-7']) == 7\n\ntest_fail(lambda: find_start_of_numeric_data(['Results:',\n '',\n 'Channel 1:',\n 'Ep = 0.698V',\n 'ip = -1.338e-6A',\n 'Ap = -2.077e-7VA']), exc=ValueError)\n\n\nsource\n\n\nparse_chi_file\n\n parse_chi_file (contents:str)\n\nNow for the DPV tests\n\n# MPN_tab test\nwith open(os.path.join(test_dpv_dir, \"MPN_tab.txt\")) as f:\n    lines = f.read()\n\nparsed_data = parse_chi_file(lines)\nassert parsed_data[\"memo\"][\"timestamp\"] == \"2022-10-10T09:30:07\"\nassert parsed_data[\"parameters\"][\"Init E (V)\"] == 0.2\nassert parsed_data[\"parameters\"][\"Final E (V)\"] == 0.9\nassert parsed_data[\"numeric_data\"][\"Current/A\"][0] == -2.681e-7\n\n\n# MPRN_comma test\nwith open(os.path.join(test_dpv_dir, \"MPRN_comma.txt\")) as f:\n    lines = f.read()\n\nparsed_data = parse_chi_file(lines)\nassert parsed_data[\"memo\"][\"timestamp\"] == \"2025-02-06T17:35:06\"\nassert parsed_data[\"parameters\"][\"Init E (V)\"] == 0.2\nassert parsed_data[\"parameters\"][\"Final E (V)\"] == 1\nassert parsed_data[\"numeric_data\"][\"Current/A\"][0] == -6.596e-07\n\n\n# MPRN_tab test\nwith open(os.path.join(test_dpv_dir, \"MPRN_tab.txt\")) as f:\n    lines = f.read()\n\nparsed_data = parse_chi_file(lines)\nassert parsed_data[\"memo\"][\"timestamp\"] == \"2022-10-10T12:12:21\"\nassert parsed_data[\"parameters\"][\"Init E (V)\"] == 0.2\nassert parsed_data[\"parameters\"][\"Final E (V)\"] == 0.9\nassert parsed_data[\"numeric_data\"][\"Current/A\"][0] == -5.151e-7\n\n\n# MPRN_tab_time test\nwith open(os.path.join(test_dpv_dir, \"MPRN_tab_time.txt\")) as f:\n    lines = f.read()\n\nparsed_data = parse_chi_file(lines)\nassert parsed_data[\"memo\"][\"timestamp\"] == \"2022-07-19T10:35:26\"\nassert parsed_data[\"parameters\"][\"Init E (V)\"] == 0.4\nassert parsed_data[\"parameters\"][\"Final E (V)\"] == 1.4\nassert parsed_data[\"numeric_data\"][\"Current/A\"][0] == -5.844e-7\n\n\n# PN_tab_time test\nwith open(os.path.join(test_dpv_dir, \"PN_tab_time.txt\")) as f:\n    lines = f.read()\n\nparsed_data = parse_chi_file(lines)\nassert parsed_data[\"memo\"] == {}\nassert parsed_data[\"parameters\"][\"Init E (V)\"] == 0.5\nassert parsed_data[\"parameters\"][\"Final E (V)\"] == 1\nassert parsed_data[\"numeric_data\"][\"Current/A\"][0] == -4.187e-7\n\nand the CV tests\n\nwith open(os.path.join(test_cv_dir, \"MPRN_charge.txt\")) as f:\n    lines = f.read()\n\nparsed_data = parse_chi_file(lines)\nassert parsed_data[\"memo\"][\"timestamp\"] == \"2024-10-04T11:25:46\"\nassert parsed_data[\"parameters\"][\"Init E (V)\"] == -0.9\nassert parsed_data[\"parameters\"][\"High E (V)\"] == 0.9\nassert parsed_data[\"numeric_data\"][\"Current/A\"][0] == 1.305e-5\nassert parsed_data[\"numeric_data\"][\"Charge/C\"][0] == 5.218e-7",
    "crumbs": [
      "CHI File Parsing"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "potentiostat-data-parser",
    "section": "",
    "text": "Install latest from the GitHub repository:\n$ pip install git+https://github.com/bxw315-umd/potentiostat-data-parser.git\nor from conda\n$ conda install -c bxw315-umd potentiostat_data_parser\nor from pypi\n$ pip install potentiostat_data_parser\n\n\n\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "potentiostat-data-parser"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "potentiostat-data-parser",
    "section": "",
    "text": "Install latest from the GitHub repository:\n$ pip install git+https://github.com/bxw315-umd/potentiostat-data-parser.git\nor from conda\n$ conda install -c bxw315-umd potentiostat_data_parser\nor from pypi\n$ pip install potentiostat_data_parser\n\n\n\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "potentiostat-data-parser"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "potentiostat-data-parser",
    "section": "How to use",
    "text": "How to use\n\nCHI Example\n\nprint(contents)\n\nJuly 19, 2022   10:35:26\nDifferential Pulse Voltammetry\nFile: dpv_gce_0.1m_pbbuffer_220719.bin\nData Source:  Experiment\nInstrument Model:  CHI1040C\nHeader: \nNote: \n\nInit E (V) = 0.4\nFinal E (V) = 1.4\nIncr E (V) = 0.004\nAmplitude (V) = 0.05\nPulse Width (sec) = 0.06\nSample Width (sec) = 0.03\nPulse Period (sec) = 0.5\nQuiet Time (sec) = 2\nSensitivity (A/V) = 1e-5\n\nEp = 0.584V\nip = -1.618e-7A\nAp = -1.423e-8VA\n\nPotential/V Current/A   Time/s\n\n0.440   -5.844e-7\n0.480   -6.668e-7\n0.520   -8.177e-7\n0.560   -1.002e-6\n0.600   -1.023e-6\n0.640   -9.839e-7\n\n\n\nparse_chi_file(contents)\n\n{'memo': {'timestamp': '2022-07-19T10:35:26',\n  'technique': 'Differential Pulse Voltammetry',\n  'file': 'dpv_gce_0.1m_pbbuffer_220719.bin',\n  'instrument_model': 'CHI1040C'},\n 'parameters': {'Init E (V)': 0.4,\n  'Final E (V)': 1.4,\n  'Incr E (V)': 0.004,\n  'Amplitude (V)': 0.05,\n  'Pulse Width (sec)': 0.06,\n  'Sample Width (sec)': 0.03,\n  'Pulse Period (sec)': 0.5,\n  'Quiet Time (sec)': 2.0,\n  'Sensitivity (A/V)': 1e-05},\n 'numeric_data': {'Potential/V': array([0.44, 0.48, 0.52, 0.56, 0.6 , 0.64]),\n  'Current/A': array([-5.844e-07, -6.668e-07, -8.177e-07, -1.002e-06, -1.023e-06,\n         -9.839e-07])}}\n\n\n\n\nPalmsens example\n\nprint(contents)\n\nDate and time:,2025-03-29 23:18:59\nNotes:\n,,,,,,,,,,,,\nDifferential Pulse Voltammetry [1]: S49,,Differential Pulse Voltammetry [8]: S48,,Differential Pulse Voltammetry [15]: S47,,Differential Pulse Voltammetry [22]: S46,,Differential Pulse Voltammetry [29]: S45,,Differential Pulse Voltammetry [36]: S44,,Differential Pulse Voltammetry [43]: S43\nDate and time measurement:,2025-03-29 13:32:13,Date and time measurement:,2025-03-29 14:28:03,Date and time measurement:,2025-03-29 16:28:02,Date and time measurement:,2025-03-29 17:28:20,Date and time measurement:,2025-03-29 19:41:19,Date and time measurement:,2025-03-29 20:35:10,Date and time measurement:,2025-03-29 21:22:52,\nV,µA,V,µA,V,µA,V,µA,V,µA,V,µA,V,µA\n0,0.019751112,0,0.040179824,0,0.045964596,0,0.04073982,0,0.044447004,0,0.043287808,0,0.05077498\n0.01020757,0.019157514,0.01020757,0.039586228,0.01020757,0.0450126,0.01020757,0.039709428,0.01020757,0.042632616,0.01020757,0.041630216,0.01020757,0.050198176\n0.02041514,0.018810318,0.02041514,0.038824632,0.02041514,0.044525404,0.02041514,0.039082228,0.02041514,0.04155182,0.02041514,0.040493424,0.02041514,0.047666992\n0.03062271,0.01848552,0.03062271,0.038460632,0.03062271,0.044407804,0.03062271,0.038936632,0.03062271,0.04089662,0.03062271,0.039731828,0.03062271,0.045947796\n\n\n\nparse_palmsens_file(contents)\n\n[{'name': 'Differential Pulse Voltammetry [1]: S49',\n  'timestamp': '2025-03-29T13:32:13',\n  'potential': array([0.        , 0.01020757, 0.02041514]),\n  'current': array([1.9751112e-08, 1.9157514e-08, 1.8810318e-08])},\n {'name': 'Differential Pulse Voltammetry [8]: S48',\n  'timestamp': '2025-03-29T14:28:03',\n  'potential': array([0.        , 0.01020757, 0.02041514]),\n  'current': array([4.0179824e-08, 3.9586228e-08, 3.8824632e-08])},\n {'name': 'Differential Pulse Voltammetry [15]: S47',\n  'timestamp': '2025-03-29T16:28:02',\n  'potential': array([0.        , 0.01020757, 0.02041514]),\n  'current': array([4.5964596e-08, 4.5012600e-08, 4.4525404e-08])},\n {'name': 'Differential Pulse Voltammetry [22]: S46',\n  'timestamp': '2025-03-29T17:28:20',\n  'potential': array([0.        , 0.01020757, 0.02041514]),\n  'current': array([4.0739820e-08, 3.9709428e-08, 3.9082228e-08])},\n {'name': 'Differential Pulse Voltammetry [29]: S45',\n  'timestamp': '2025-03-29T19:41:19',\n  'potential': array([0.        , 0.01020757, 0.02041514]),\n  'current': array([4.4447004e-08, 4.2632616e-08, 4.1551820e-08])},\n {'name': 'Differential Pulse Voltammetry [36]: S44',\n  'timestamp': '2025-03-29T20:35:10',\n  'potential': array([0.        , 0.01020757, 0.02041514]),\n  'current': array([4.3287808e-08, 4.1630216e-08, 4.0493424e-08])},\n {'name': 'Differential Pulse Voltammetry [43]: S43',\n  'timestamp': '2025-03-29T21:22:52',\n  'potential': array([0.        , 0.01020757, 0.02041514]),\n  'current': array([5.0774980e-08, 5.0198176e-08, 4.7666992e-08])}]",
    "crumbs": [
      "potentiostat-data-parser"
    ]
  }
]